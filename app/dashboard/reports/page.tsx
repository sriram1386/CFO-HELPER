"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { FileText, Download, Share2, Eye, Calendar, TrendingUp, DollarSign, BarChart3, Trash2 } from "lucide-react"
import { useUserReports, type UserReport } from "@/lib/storage"
import { FinancialCalculator } from "@/lib/financial-calculations"

export default function ReportsPage() {
  const [reportType, setReportType] = useState("financial-summary")
  const [timeframe, setTimeframe] = useState("12")
  const [includeCharts, setIncludeCharts] = useState(true)
  const [includeForecasts, setIncludeForecasts] = useState(true)
  const [includeScenarios, setIncludeScenarios] = useState(false)

  const { reports, saveReport, deleteReport, loading } = useUserReports()

  const generateReport = () => {
    const reportName = `${reportType.replace("-", " ").replace(/\b\w/g, (l) => l.toUpperCase())} - ${new Date().toLocaleDateString()}`

    const newReport: UserReport = {
      id: Date.now().toString(),
      name: reportName,
      type: reportType.replace("-", " ").replace(/\b\w/g, (l) => l.toUpperCase()),
      data: {
        timeframe,
        includeCharts,
        includeForecasts,
        includeScenarios,
        generatedAt: new Date().toISOString(),
        // In a real app, this would contain the actual report data
        sampleData: {
          revenue: 75000,
          profit: 25000,
          expenses: 50000,
          growthRate: 5.2,
        },
      },
      createdAt: new Date().toISOString(),
      status: "generating",
      size: "Generating...",
    }

    saveReport(newReport)

    // Simulate report generation
    setTimeout(() => {
      const updatedReport = {
        ...newReport,
        status: "generated" as const,
        size: `${(Math.random() * 2 + 1).toFixed(1)} MB`,
      }
      saveReport(updatedReport)
    }, 3000)
  }

  const downloadReport = (report: UserReport) => {
    // Generate actual report content
    const reportContent = generateReportContent(report)

    const blob = new Blob([reportContent], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${report.name.toLowerCase().replace(/\s+/g, "-")}.txt`
    a.click()
    URL.revokeObjectURL(url)
  }

  const generateReportContent = (report: UserReport): string => {
    const calculator = new FinancialCalculator({
      revenue: 75000,
      teamSize: 8,
      marketingBudget: 15000,
      operationalCosts: 30000,
    })

    const metrics = calculator.calculateMetrics()
    const forecast = calculator.generateForecast(12)
    const insights = calculator.generateInsights()

    return `
CFO HELPER FINANCIAL REPORT
${report.name}
Generated: ${new Date(report.createdAt).toLocaleString()}

EXECUTIVE SUMMARY
================
Monthly Revenue: $${metrics.monthlyRevenue.toLocaleString()}
Monthly Profit: $${metrics.monthlyProfit.toLocaleString()}
Profit Margin: ${metrics.profitMargin.toFixed(1)}%
Cash Runway: ${metrics.cashRunway}

KEY METRICS
===========
Gross Margin: ${metrics.grossMargin.toFixed(1)}%
Burn Rate: $${metrics.burnRate.toLocaleString()}/month
Customer Acquisition Cost: $${metrics.customerAcquisitionCost.toFixed(0)}
Lifetime Value: $${metrics.lifetimeValue.toFixed(0)}
Break-even Revenue: $${metrics.breakEvenRevenue.toLocaleString()}

12-MONTH FORECAST
================
${forecast
  .map(
    (month) => `${month.month}: Revenue $${month.revenue.toLocaleString()}, Profit $${month.profit.toLocaleString()}`,
  )
  .join("\n")}

AI INSIGHTS & RECOMMENDATIONS
============================
${insights.join("\n")}

DISCLAIMER
==========
This report is generated based on the financial parameters provided and should be used for planning purposes only. 
Actual results may vary. Please consult with a financial advisor for investment decisions.

Generated by CFO Helper - https://cfo-helper.com
    `.trim()
  }

  const handleDeleteReport = (reportId: string) => {
    if (confirm("Are you sure you want to delete this report?")) {
      deleteReport(reportId)
    }
  }

  const reportTypes = [
    {
      value: "financial-summary",
      label: "Financial Summary",
      description: "Complete overview of financial performance",
    },
    { value: "forecast-report", label: "Forecast Report", description: "Detailed financial projections and trends" },
    {
      value: "scenario-analysis",
      label: "Scenario Analysis",
      description: "Comparison of different business scenarios",
    },
    { value: "performance-report", label: "Performance Report", description: "KPI tracking and performance metrics" },
    { value: "cash-flow", label: "Cash Flow Report", description: "Detailed cash flow analysis and projections" },
  ]

  const selectedReportType = reportTypes.find((type) => type.value === reportType)

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-slate-900"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-3xl font-bold text-slate-900 dark:text-slate-100">Reports</h1>
        <p className="text-slate-600 dark:text-slate-300 mt-1">Generate and manage your financial reports and analyses.</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Report Generator */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <FileText className="h-5 w-5" />
              Generate New Report
            </CardTitle>
            <CardDescription>Create a custom financial report with your preferred settings</CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-4">
              <div className="space-y-2">
                <label className="text-sm font-medium">Report Type</label>
                <Select value={reportType} onValueChange={setReportType}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {reportTypes.map((type) => (
                      <SelectItem key={type.value} value={type.value}>
                        {type.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {selectedReportType && <p className="text-xs text-slate-500">{selectedReportType.description}</p>}
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Time Frame</label>
                <Select value={timeframe} onValueChange={setTimeframe}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="3">Last 3 Months</SelectItem>
                    <SelectItem value="6">Last 6 Months</SelectItem>
                    <SelectItem value="12">Last 12 Months</SelectItem>
                    <SelectItem value="24">Last 24 Months</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-3">
                <label className="text-sm font-medium">Include in Report</label>
                <div className="space-y-2">
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="charts"
                      checked={includeCharts}
                      onCheckedChange={(checked) => setIncludeCharts(checked as boolean)}
                    />
                    <label htmlFor="charts" className="text-sm">
                      Charts and Visualizations
                    </label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="forecasts"
                      checked={includeForecasts}
                      onCheckedChange={(checked) => setIncludeForecasts(checked as boolean)}
                    />
                    <label htmlFor="forecasts" className="text-sm">
                      Financial Forecasts
                    </label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="scenarios"
                      checked={includeScenarios}
                      onCheckedChange={(checked) => setIncludeScenarios(checked as boolean)}
                    />
                    <label htmlFor="scenarios" className="text-sm">
                      Scenario Comparisons
                    </label>
                  </div>
                </div>
              </div>
            </div>

            <Button onClick={generateReport} className="w-full">
              Generate Report
            </Button>
          </CardContent>
        </Card>

        {/* Report Preview */}
        <Card>
          <CardHeader>
            <CardTitle className="dark:text-slate-100">Report Preview</CardTitle>
            <CardDescription className="dark:text-slate-400">Preview of what will be included in your report</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="p-4 bg-slate-50 dark:bg-slate-800 rounded-lg">
                <h4 className="font-medium mb-2 dark:text-slate-100">{selectedReportType?.label}</h4>
                <p className="text-sm text-slate-600 dark:text-slate-300 mb-3">{selectedReportType?.description}</p>
                <div className="space-y-2 text-sm">
                  <div className="flex items-center gap-2">
                    <Calendar className="h-4 w-4 text-slate-400" />
                    <span className="dark:text-slate-300">Time frame: {timeframe} months</span>
                  </div>
                  {includeCharts && (
                    <div className="flex items-center gap-2">
                      <BarChart3 className="h-4 w-4 text-blue-600" />
                      <span className="dark:text-slate-300">Charts and visualizations included</span>
                    </div>
                  )}
                  {includeForecasts && (
                    <div className="flex items-center gap-2">
                      <TrendingUp className="h-4 w-4 text-green-600" />
                      <span className="dark:text-slate-300">Financial forecasts included</span>
                    </div>
                  )}
                  {includeScenarios && (
                    <div className="flex items-center gap-2">
                      <DollarSign className="h-4 w-4 text-purple-600" />
                      <span className="dark:text-slate-300">Scenario comparisons included</span>
                    </div>
                  )}
                </div>
              </div>

              <div className="border-t pt-4">
                <h5 className="font-medium mb-2 dark:text-slate-100">Estimated Content</h5>
                <div className="text-sm text-slate-600 dark:text-slate-300 space-y-1">
                  <div>• Executive summary</div>
                  <div>• Key financial metrics</div>
                  <div>• Performance analysis</div>
                  {includeCharts && <div>• Visual charts and graphs</div>}
                  {includeForecasts && <div>• Future projections</div>}
                  {includeScenarios && <div>• Scenario comparisons</div>}
                  <div>• AI insights and recommendations</div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Generated Reports */}
      <Card>
        <CardHeader>
          <CardTitle>Generated Reports ({reports.length})</CardTitle>
          <CardDescription>Your previously generated financial reports</CardDescription>
        </CardHeader>
        <CardContent>
          {reports.length === 0 ? (
            <div className="text-center py-8 text-slate-500">
              <FileText className="h-12 w-12 mx-auto mb-4 text-slate-300" />
              <p>No reports generated yet. Create your first report above!</p>
            </div>
          ) : (
            <div className="space-y-4">
              {reports.map((report) => (
                <div key={report.id} className="flex items-center justify-between p-4 border rounded-lg">
                  <div className="flex items-center gap-4">
                    <div className="p-2 bg-slate-100 rounded-lg">
                      <FileText className="h-5 w-5 text-slate-600" />
                    </div>
                    <div>
                      <h4 className="font-medium">{report.name}</h4>
                      <div className="flex items-center gap-2 mt-1">
                        <Badge variant="secondary" className="text-xs">
                          {report.type}
                        </Badge>
                        <span className="text-xs text-slate-500">
                          Created {new Date(report.createdAt).toLocaleDateString()}
                        </span>
                        <span className="text-xs text-slate-500">• {report.size}</span>
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    {report.status === "generating" ? (
                      <Badge variant="outline" className="text-orange-600">
                        Generating...
                      </Badge>
                    ) : report.status === "failed" ? (
                      <Badge variant="destructive">Failed</Badge>
                    ) : (
                      <>
                        <Button size="sm" variant="ghost">
                          <Eye className="h-4 w-4" />
                        </Button>
                        <Button size="sm" variant="ghost" onClick={() => downloadReport(report)}>
                          <Download className="h-4 w-4" />
                        </Button>
                        <Button size="sm" variant="ghost">
                          <Share2 className="h-4 w-4" />
                        </Button>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => handleDeleteReport(report.id)}
                          className="text-red-600 hover:text-red-700"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
